const CONFIG={maxWert:999999,winterFaktor:1.02,winterMonate:[11,12,1,2],vorkommastellen:6,nachkommastellen:3,DEBUG_MODE:!1},logDebug=(e,t=!1)=>{if(CONFIG.DEBUG_MODE){if(t||!["hideError: Element","showError: Fehlermeldung für","showError: is-invalid Klasse für","Hinweis:","zurückgesetzt","Setze Standard-Ausgaben zurück","After normalizeGermanDate","Normalized value is empty"].some(t=>e.includes(t))){console.log(`[DEBUG] ${e}`);const t=document.getElementById("debugOutput");t&&(t.value+=`[DEBUG] ${e}\n`,t.scrollTop=t.scrollHeight)}}},logWarn=e=>{if(CONFIG.DEBUG_MODE){console.warn(`[WARN] ${e}`);const t=document.getElementById("debugOutput");t&&(t.value+=`[WARN] ${e}\n`,t.scrollTop=t.scrollHeight)}},logError=e=>{if(CONFIG.DEBUG_MODE){console.error(`[ERROR] ${e}`);const t=document.getElementById("debugOutput");t&&(t.value+=`[ERROR] ${e}\n`,t.scrollTop=t.scrollHeight)}},lastCalculation={values:null,result:null};document.addEventListener("DOMContentLoaded",function(){if(setTimeout(()=>{logDebug("DOM fully loaded.")},0),"undefined"!=typeof bootstrap){[...document.querySelectorAll('[data-bs-toggle="tooltip"]')].map(e=>new bootstrap.Tooltip(e));logDebug("Bootstrap Tooltips initialized.")}else logWarn("Bootstrap JavaScript nicht geladen. Tooltips werden nicht initialisiert.");const e=(e,t)=>{e&&(e.textContent=t)};logDebug("[DEBUG_DOM_CACHED] Essential DOM element check starting...");const t=document.getElementById("datumAltInput"),n=document.getElementById("zaehlerstandAltInput"),a=document.getElementById("datumNeuInput"),r=document.getElementById("zaehlerstandNeuInput"),u=document.getElementById("datumZwischenInput"),l=document.getElementById("datumZukunftInput"),o=document.getElementById("verbrauchGesamtOutput"),s=(document.getElementById("tageGesamtOutput"),document.getElementById("verbrauchZwischenOutput")),g=document.getElementById("verbrauchZukunftOutput"),i=(document.getElementById("tageZukunftOutput"),document.getElementById("verbrauchNeuOutput")),d=(document.getElementById("tageAktuellOutput"),document.getElementById("tageZwischenOutput"),document.getElementById("zaehlerstandZwischenOutput")),c=document.getElementById("zaehlerstandZukunftOutput"),m=document.getElementById("rundungsOption"),h=document.getElementById("vorkommastellenOption"),f=document.getElementById("wintermodusCheckbox"),b=document.getElementById("abrechnungCheckbox"),D=document.getElementById("openModalButton");document.getElementById("modalFooterButton"),document.getElementById("closeButton"),document.getElementById("debugOutput");[t,n,a,r,h].every(e=>!!e||(logWarn("Ein essentielles DOM-Element wurde nicht gefunden."),!1))?logDebug("[DEBUG_DOM_CACHED] All essential DOM elements found."):logError("Nicht alle essentiellen DOM-Elemente wurden gefunden.");[n,r,t,a,l,u].forEach(e=>{e&&e.addEventListener("keydown",function(e){"Enter"===e.key&&e.preventDefault()})});const E=(e,t)=>{const n=document.getElementById(e),a=document.getElementById(e+"Feedback");n&&n.classList.add("is-invalid"),a?(a.textContent=t,a.style.display="block"):logWarn(`Feedback element not found for #${e}`)},v=e=>{const t=document.getElementById(e),n=document.getElementById(e+"Feedback");t&&t.classList.remove("is-invalid"),n?(n.textContent="",n.style.display="none"):logWarn(`Feedback element not found for #${e}`)},p=e=>{if(!e||"-"===e)return"-";const t=e.replace(/\./g,"").replace(",","."),n=parseFloat(t);return isNaN(n)?"-":n},k=e=>{if(!e||"-"===e)return null;const t=e.split(/[\.\/]/);if(3!==t.length)return null;const n=parseInt(t[0],10),a=parseInt(t[1],10);let r=parseInt(t[2],10);r<100&&(r=r<50?2e3+r:1900+r);const u=new Date(r,a-1,n);return u.getDate()!==n||u.getMonth()!==a-1||u.getFullYear()!==r?null:u},B=e=>{if(!e)return"";const t=e.match(/^(\d{1,2})[\.\-/](\d{1,2})[\.\-/](\d{2,4})$/);if(!t)return"";let n=t[1],a=t[2],r=t[3];if(n=n.padStart(2,"0"),a=a.padStart(2,"0"),2===r.length){const e=(new Date).getFullYear(),t=parseInt(r,10);t>=0&&t<=99&&(r=t<=e%100+5?"20"+r:"19"+r)}const u=`${n}.${a}.${r}`;return(e=>{if(!/^\d{2}\.\d{2}\.\d{4}$/.test(e))return!1;const t=e.split("."),n=parseInt(t[0],10),a=parseInt(t[1],10),r=parseInt(t[2],10);if(r<1e3||r>3e3||0==a||a>12)return!1;const u=new Date(r,a-1,n);return u.getDate()==n&&u.getMonth()==a-1&&u.getFullYear()==r})(u)?u:(logDebug(`[DEBUG_NORMALIZE] Normalized date is invalid: ${u}`),"")},I=e=>{if(!e||isNaN(e.getTime()))return!1;const t=e.getMonth()+1;return CONFIG.winterMonate.includes(t)},$=(e,t)=>{const n=resetDateTime(e),a=resetDateTime(t),r=Math.abs(a-n);return Math.ceil(r/864e5)},T=(e,t,n,a,r,u,l,o)=>{if(logDebug(`[DEBUG] Berechne Zählerstand für ${e} ...`),b&&b.checked){if(1===Math.abs(u-e)/864e5)return logDebug("[DEBUG] Aufeinanderfolgende Tage zum Enddatum erkannt - verwende Endzählerstand"),l;if(1===Math.abs(e-t)/864e5)return logDebug("[DEBUG] Aufeinanderfolgende Tage erkannt - verwende tatsächlichen Verbrauch"),n;logDebug("Berechnung für zukünftigen Zählerstand gestartet"),logDebug(`Start-Zählerstand: ${n}, End-Zählerstand: ${l}`),logDebug(`Referenz-Zeitraum: ${t} - ${u}, Ziel-Datum: ${e}`),logDebug(`Wintermodus aktiv: ${o}, Abrechnung aktiv: ${b&&b.checked}`)}const s=o&&I(e);logDebug(`[DEBUG] Wintermodus aktiv: ${s}`);const g=$(t,e);let i=0,d=0,c=resetDateTime(t);const m=resetDateTime(e);for(;c<m;)I(c)?d++:i++,c.setDate(c.getDate()+1);let h;if(logDebug(`[DEBUG] Sommer-Tage: ${i}`),logDebug(`[DEBUG] Winter-Tage: ${d}`),o){h=i*a+d*r}else h=g*a;let f=n+h;f>CONFIG.maxWert&&(f-=CONFIG.maxWert);const D=Math.pow(10,CONFIG.nachkommastellen);return f=Math.round(f*D)/D},Z=(e,t)=>"number"!=typeof e?"-":e.toFixed(t).replace(/\./g,","),O=(e,t)=>"number"!=typeof e?"-":e.toLocaleString("de-DE",{maximumFractionDigits:t}),w=e=>{const t="number"==typeof e?e:p(e);if("-"===t)return"-";let n;switch(m.value){case"standard":return n=Math.round(t),Z(n,0);case"floor":return n=Math.floor(t),Z(n,0);case"none":default:return O(t,3)}},y=e=>{const t="number"==typeof e?e:p(e);if("-"===t)return"-";let n;switch(m.value){case"standard":return n=Math.round(t),Z(n,0);case"floor":return n=Math.floor(t),Z(n,0);case"none":default:return O(t,3)}},M=()=>{d&&(d.textContent="-"),c&&(c.textContent="-"),g&&(g.textContent="-",g.classList.remove("overflow")),i&&(i.textContent="-",i.classList.remove("overflow")),s&&(s.textContent="-",s.classList.remove("overflow")),o&&o.classList.remove("overflow")},G=()=>{const o={start:n.value,ende:r.value,datumStart:t.value,datumEnde:a.value,datumZwischen:u?u.value:"",datumZukunft:l?l.value:"",vorkommastellen:h?h.value:"",wintermodus:!!f&&f.checked,rundenOption:m?m.value:"",abrechnung:!!b&&b.checked};if(lastCalculation.values&&JSON.stringify(o)===JSON.stringify(lastCalculation.values))return lastCalculation.result;logDebug("[DEBUG_CALC_START] Entering aktualisiereBerechnung."),logDebug("--- Starte Neuberechnung ---");const s=document.getElementById("verbrauchProTagOutput"),g=document.getElementById("verbrauchProTagSommerOutput"),i=document.getElementById("verbrauchProTagWinterOutput"),d=document.getElementById("zaehlerstandZukunftOutput"),c=document.getElementById("verbrauchZukunftOutput"),D=document.getElementById("tageZukunftOutput"),B=document.getElementById("verbrauchGesamtOutput"),Z=document.getElementById("tageGesamtOutput"),O=document.getElementById("verbrauchNeuOutput"),G=document.getElementById("tageAktuellOutput"),C=document.getElementById("verbrauchZwischenOutput"),A=document.getElementById("tageZwischenOutput"),N=document.getElementById("zaehlerstandZwischenOutput"),S=parseInt(h.value,10),L=getMaxWert(S);logDebug(`Vorkommastellen: ${S}, MaxWert: ${L}`);const z=n.value.trim(),F=r.value.trim(),x=t.value.trim(),U=a.value.trim();logDebug(`Eingabewerte: Start=${z}, Ende=${F}, DatumStart=${x}, DatumEnde=${U}`);const W=!!u?u.value.trim():"",V=!!l?l.value.trim():"";logDebug(`Optionale Eingaben: Zwischen=${W}, Zukunft=${V}`);let J=!0;const R=n&&n.value.trim()||r&&r.value.trim()||t&&t.value.trim()||a&&a.value.trim();if(logDebug("Starte Pflichtfeldprüfung..."),z||"true"!==n.dataset.touched&&!R?v(n.id):(E(n.id,"Pflichtfeld."),logDebug("Fehler: Zählerstand Start ist leer"),J=!1),F||"true"!==r.dataset.touched&&!R?v(r.id):(E(r.id,"Pflichtfeld."),logDebug("Hinweis: Zählerstand Ende ist leer"),J=!1),x||"true"!==t.dataset.touched&&!R?v(t.id):(E(t.id,"Pflichtfeld."),logDebug("Hinweis: Datum Start ist leer"),J=!1),U||"true"!==a.dataset.touched&&!R?v(a.id):(E(a.id,"Pflichtfeld."),logDebug("Hinweis: Datum Ende ist leer"),J=!1),!J)return logDebug("Berechnung abgebrochen: Pflichtfelder fehlen"),void M();if(logDebug("Starte Nachkommastellen-Validierung..."),z){const e=z.split(",");if(2===e.length&&e[1].length>CONFIG.nachkommastellen)return logDebug(`Fehler: Zählerstand Start hat zu viele Nachkommastellen (${e[1].length} > ${CONFIG.nachkommastellen})`),E(n.id,`Zu viele Nachkommastellen. Maximal ${CONFIG.nachkommastellen} erlaubt.`),void M()}if(F){const e=F.split(",");if(2===e.length&&e[1].length>CONFIG.nachkommastellen)return logDebug(`Fehler: Zählerstand Ende hat zu viele Nachkommastellen (${e[1].length} > ${CONFIG.nachkommastellen})`),E(r.id,`Zu viele Nachkommastellen. Maximal ${CONFIG.nachkommastellen} erlaubt.`),void M()}logDebug("Starte Parsing der Eingabewerte...");const _=p(z),P=p(F),H=k(x),K=k(U),Y=W?k(W):void 0,q=document.getElementById("zaehlerstandZwischenInput"),j=q?p(q.value.trim()):void 0,Q=V?k(V):void 0,X=document.getElementById("zaehlerstandZukunftInput");X&&p(X.value.trim());logDebug(`Parsed values: Start=${_}, Ende=${P}, DatumStart=${H}, DatumEnde=${K}`);const ee=getMaxWert(S);if("-"!==_&&_>ee)return logDebug(`Fehler: Zählerstand Start (${_}) überschreitet maximalen Wert (${ee})`),E(n.id,`Wert überschreitet den maximalen Zählerstand (${ee.toLocaleString("de-DE")}).`),void M();if("-"!==P&&P>ee)return logDebug(`Fehler: Zählerstand Ende (${P}) überschreitet maximalen Wert (${ee})`),E(r.id,`Wert überschreitet den maximalen Zählerstand (${ee.toLocaleString("de-DE")}).`),void M();if("-"===_||"-"===P||!H||!K)return logDebug("Berechnung abgebrochen: Ungültige Werte nach Parsing"),void M();const te=!!b&&b.checked,ne=!!f&&f.checked;logDebug(`Abrechnungs-Checkbox Status: ${te}`),logDebug(`Wintermodus Status: ${ne}`);let ae=((e,t,n)=>t>=e?(logDebug(`Berechne Verbrauch (normal): ${t} - ${e}`),{verbrauch:t-e,ueberlauf:!1}):(logDebug(`Berechne Verbrauch (Überlauf): ((${n} + 1) - ${e}) + ${t}`),{verbrauch:n+1-e+t,ueberlauf:!0}))(_,P,L),re=$(H,K),ue=ae.ueberlauf;ae=ae.verbrauch,te&&Y&&sindAufeinanderfolgendeTage(Y,K)?void 0!==j&&j===P&&(ae=0,re=1):te&&!Y&&sindAufeinanderfolgendeTage(H,K)&&(ae=0,re=1),te&&Y&&31===Y.getDate()&&11===Y.getMonth()&&void 0!==j&&j===P&&(ae=0,re=1);const le=ae,oe=re;if(logDebug(`Berechnete Werte: Verbrauch=${le}, Tage=${oe}`),"-"===le||"-"===oe)return logDebug("Berechnung abgebrochen: Ungültige Berechnungsergebnisse"),void M();let se=0,ge=0,ie=0;if(ne){let e=0,t=0,n=resetDateTime(H),a=resetDateTime(K);for(;n<a;)I(n)?t++:e++,n.setDate(n.getDate()+1);const r=e+t*CONFIG.winterFaktor;ie=(e*(se=r>0?le/r:0)+t*(ge=se*CONFIG.winterFaktor))/oe,logDebug(`Sommer-Tage (Gesamt): ${e}`),logDebug(`Winter-Tage (Gesamt): ${t}`),logDebug(`Effektive Tage: ${r}`),logDebug(`Basis Verbrauch pro Tag (Sommer): ${se}`)}else ge=se=le/oe,ie=se;logDebug(`Verbrauch pro Tag (Sommer): ${se}`),logDebug(`Verbrauch pro Tag (Winter): ${ge}`),logDebug(`Verbrauch pro Tag (Effektiv für Anzeige): ${ie}`),e(s,y(ie)),e(g,y(se)),e(i,y(ge)),logDebug("Schreibe Ergebnisse in Ausgabefelder..."),logDebug(`verbrauchGesamtOutput existiert: ${!!B}`),logDebug(`tageGesamtOutput existiert: ${!!Z}`);let de=y(le);B?(B.textContent=de,ue?(B.classList.add("overflow"),logDebug("Überlauf erkannt - CSS-Klasse 'overflow' gesetzt für Verbrauch Gesamt")):B.classList.remove("overflow"),logDebug(`Verbrauch Gesamt gesetzt: ${de}`)):logDebug("WARNUNG: verbrauchGesamtOutput nicht gefunden!");let ce=Math.round(oe).toLocaleString("de-DE");if(Z?(Z.textContent=ce,logDebug(`Tage Gesamt gesetzt: ${ce}`)):logDebug("WARNUNG: tageGesamtOutput nicht gefunden!"),Y){logDebug("Berechne Zwischenwerte...");const t=k(W);if(t){const n=$(H,t);if("-"!==n){const a=T(t,H,_,se,ge,K,P,ne);if(N&&"-"!==a){const e=w(a);N.textContent=e,logDebug(`Zählerstand Zwischen gesetzt: ${e}`)}let r,u=0,l=0,o=resetDateTime(H),s=resetDateTime(t);for(;o<s;)I(o)?l++:u++,o.setDate(o.getDate()+1);const g=y(r=ne?u*se+l*ge:n*se);e(C,g),C&&(ue?(C.classList.add("overflow"),logDebug("Überlauf erkannt - CSS-Klasse 'overflow' gesetzt für Verbrauch Zwischen")):C.classList.remove("overflow")),e(A,Math.round(n).toLocaleString("de-DE")),logDebug(`Verbrauch Zwischen gesetzt: ${g}`);const i=$(t,K);let d;if(te&&sindAufeinanderfolgendeTage(t,K))d=0,e(G,"1"),logDebug("Abrechnungsmodus: Aufeinanderfolgende Tage erkannt - Verbrauch auf 0 gesetzt");else{let n=0,a=0,r=resetDateTime(t),u=resetDateTime(K);for(;r<u;)I(r)?a++:n++,r.setDate(r.getDate()+1);d=ne?n*se+a*ge:i*se,e(G,Math.round(i).toLocaleString("de-DE"))}e(O,y(d)),O&&(ue?(O.classList.add("overflow"),logDebug("Überlauf erkannt - CSS-Klasse 'overflow' gesetzt für Verbrauch Aktuell")):O.classList.remove("overflow")),logDebug(`Verbrauch Aktuell gesetzt: ${y(d)}`),e(B,y(d)),e(Z,Math.round(i).toLocaleString("de-DE")),logDebug(`Verbrauch Gesamt aktualisiert (formatiert): ${y(d)}`),logDebug(`Verbrauch Gesamt aktualisiert (Rohwert): ${d}`)}}}if(Q){logDebug("Berechne Zukunftsprognose...");const t=resetDateTime(K),n=resetDateTime(Q);if(n.getTime()<=t.getTime())return logDebug("Zukunftsdatum liegt nicht nach dem Enddatum - keine Berechnung (DatumZukunft <= DatumEnde)"),e(d,"-"),e(c,"-"),void e(D,"-");if(te&&sindAufeinanderfolgendeTage(t,n))logDebug("Aufeinanderfolgende Tage im Abrechnungsmodus erkannt"),prognoseZaehlerstand=P,verbrauchZukunft=0,tageZukunft=1;else{prognoseZaehlerstand=T(n,t,P,se,ge,t,P,ne);const e=$(t,n);let a,r=0,u=0,l=resetDateTime(t),o=resetDateTime(n);for(;l<o;)I(l)?u++:r++,l.setDate(l.getDate()+1);a=ne?r*se+u*ge:e*se,verbrauchZukunft=a,tageZukunft=e}d&&"-"!==prognoseZaehlerstand&&(e(d,w(prognoseZaehlerstand)),logDebug(`Zählerstand Zukunft gesetzt: ${w(prognoseZaehlerstand)}`)),c&&"-"!==verbrauchZukunft&&(e(c,y(verbrauchZukunft)),ue?(c.classList.add("overflow"),logDebug("Überlauf erkannt - CSS-Klasse 'overflow' gesetzt für Verbrauch Zukunft")):c.classList.remove("overflow"),logDebug(`Verbrauch Zukunft gesetzt: ${y(verbrauchZukunft)}`)),D&&"-"!==tageZukunft&&(e(D,Math.round(tageZukunft).toLocaleString("de-DE")),logDebug(`Tage Zukunft gesetzt: ${Math.round(tageZukunft).toLocaleString("de-DE")}`))}else{const t=document.getElementById("zaehlerstandZukunftOutput"),n=document.getElementById("verbrauchZukunftOutput"),a=document.getElementById("tageZukunftOutput");t&&e(t,"-"),n&&e(n,"-"),a&&e(a,"-")}logDebug("[DEBUG_CALC_END] aktualisiereBerechnung erfolgreich abgeschlossen."),lastCalculation.values=o,lastCalculation.result={verbrauchGesamt:le,tageGesamt:oe,verbrauchNeu:O?O.textContent:"-",tageAktuell:G?G.textContent:"-",verbrauchZwischen:C?C.textContent:"-",tageZwischen:A?A.textContent:"-",zaehlerstandZukunft:d?d.textContent:"-",verbrauchZukunft:c?c.textContent:"-",tageZukunft:D?D.textContent:"-"}},C=(e,t)=>{let n;return function(...a){clearTimeout(n),n=setTimeout(()=>{clearTimeout(n),e(...a)},t)}},A=(C(e=>{handleInputValidation(e,!1)},50),(e,t,n)=>{e.forEach(e=>{e&&e.addEventListener(t,n)})});A([n,r],"focus",function(){this.dataset.touched="true",handleInputValidation(this,!0)}),A([n,r],"blur",function(){const e=this;C(()=>{handleInputValidation(e,!0)&&G()},25)()}),A([n,r],"input",function(){const e=this;C(()=>{e.dataset.touched="true",G()},50)()}),A([t,a,l,u],"focus",function(){this.dataset.touched="true",(e=>{const t=e.value.trim();if(v(e.id),!t)return!0;const n=t.match(/^(\d{1,2})[\.\-/](\d{1,2})[\.\-/](\d{2,4})$/);if(!n)return E(e.id,"Ungültiges Format. Erwartet: TT.MM.JJJJ, TT/MM/JJJJ oder TT-MM-JJJJ"),!1;const a=parseInt(n[1],10),r=parseInt(n[2],10);let u=parseInt(n[3],10);u<100&&(u=u<50?2e3+u:1900+u);const l=new Date(u,r-1,a);l.getDate()===a&&l.getMonth()===r-1&&l.getFullYear()===u||E(e.id,"Ungültiges Datum")})(this)}),A([t,a,l,u],"blur",function(){const e=this;C(()=>{(e=>{logDebug(`[DEBUG_VALIDATEBLUR] Entering normalizeAndValidateDateOnBlur. Element: ${e?`#${e.id}`:"N/A"} Value: ${e?`"${e.value}"`:"N/A"}`);const t=e.value.trim();if(!t)return v(e.id),!1;const n=B(t);return logDebug(`[DEBUG_VALIDATEBLUR] After normalizeGermanDate. Normalized value: ${n}`),""===n?(logDebug("[DEBUG_VALIDATEBLUR] Normalized value is empty (invalid format or date)."),E(e.id,"Ungültiges Format oder ungültiges Datum. Erwartet: TT.MM.JJJJ, TT/MM/JJJJ oder TT-MM-JJJJ"),!1):(e.value=n,logDebug(`[DEBUG_VALIDATEBLUR] Normalization successful. Setting input value to: ${n}`),v(e.id),!0)})(e)&&G()},25)()}),A([t,a,l,u],"input",function(){const e=this;C(()=>{e.dataset.touched="true",G()},50)()}),[h,f,m,b].forEach(e=>{e&&e.addEventListener("change",C(G,25))});const N=document.getElementById("infoModal");N&&N.addEventListener("hide.bs.modal",function(){D&&D.focus()}),h&&h.addEventListener("change",C(G,25)),f&&f.addEventListener("change",C(G,25)),m&&m.addEventListener("change",C(G,25)),b&&b.addEventListener("change",C(G,25))});const sindAufeinanderfolgendeTage=(e,t)=>{const n=resetDateTime(e),a=resetDateTime(t),r=Math.abs(a-n);return 1===Math.ceil(r/864e5)},berechneWintermodusTage=(e,t)=>{let n=0,a=0,r=resetDateTime(e),u=resetDateTime(t);for(;r<u;)isWinterMonth(r)?a++:n++,r.setDate(r.getDate()+1);return{sommerTage:n,winterTage:a}},pruefeAbrechnungsmodus=(e,t,n,a)=>!!abrechnungAktiv&&!(!sindAufeinanderfolgendeTage(e,t)||void 0===n||n!==a),resetDateTime=e=>{const t=new Date(e);return t.setHours(0,0,0,0),t},getMaxWert=e=>Math.pow(10,e)-1;